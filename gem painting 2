// Gem Painting Web App (React + JS)

import React, { useState, useRef } from "react";
import Cropper from "react-easy-crop";
import html2canvas from "html2canvas";
import quantize from "quantize";

export default function GemPaintingApp() {
  const [image, setImage] = useState(null);
  const [crop, setCrop] = useState({ x: 0, y: 0 });
  const [zoom, setZoom] = useState(1);
  const [croppedAreaPixels, setCroppedAreaPixels] = useState(null);
  const [gridData, setGridData] = useState([]);
  const [canvasSize, setCanvasSize] = useState({ width: 50, height: 50 });
  const inputRef = useRef(null);

  const handleImageUpload = (e) => {
    const file = e.target.files[0];
    const reader = new FileReader();
    reader.onloadend = () => {
      setImage(reader.result);
    };
    reader.readAsDataURL(file);
  };

  const onCropComplete = (_, croppedPixels) => {
    setCroppedAreaPixels(croppedPixels);
  };

  const createGrid = async () => {
    if (!image || !croppedAreaPixels) return;

    const img = new Image();
    img.src = image;
    await new Promise((resolve) => (img.onload = resolve));

    const canvas = document.createElement("canvas");
    canvas.width = canvasSize.width;
    canvas.height = canvasSize.height;
    const ctx = canvas.getContext("2d");

    ctx.drawImage(
      img,
      croppedAreaPixels.x,
      croppedAreaPixels.y,
      croppedAreaPixels.width,
      croppedAreaPixels.height,
      0,
      0,
      canvas.width,
      canvas.height
    );

    const imgData = ctx.getImageData(0, 0, canvas.width, canvas.height);
    const pixels = [];
    for (let i = 0; i < imgData.data.length; i += 4) {
      const r = imgData.data[i];
      const g = imgData.data[i + 1];
      const b = imgData.data[i + 2];
      pixels.push([r, g, b]);
    }

    const cmap = quantize(pixels, 40);
    const palette = cmap.palette();

    const mapPixel = (pixel) => {
      let closest = palette[0];
      let minDist = Infinity;
      for (const color of palette) {
        const dist =
          (pixel[0] - color[0]) ** 2 +
          (pixel[1] - color[1]) ** 2 +
          (pixel[2] - color[2]) ** 2;
        if (dist < minDist) {
          minDist = dist;
          closest = color;
        }
      }
      return closest;
    };

    const grid = [];
    let index = 0;
    for (let y = 0; y < canvas.height; y++) {
      const row = [];
      for (let x = 0; x < canvas.width; x++) {
        const pixel = pixels[index++];
        const hex = rgbToHex(...mapPixel(pixel));
        row.push(hex);
      }
      grid.push(row);
    }
    setGridData(grid);
  };

  const rgbToHex = (r, g, b) =>
    "#" + [r, g, b].map((x) => x.toString(16).padStart(2, "0")).join("");

  return (
    <div className="p-4 space-y-4">
      <h1 className="text-xl font-bold">Gem Painting Template Generator</h1>

      <input
        type="file"
        accept="image/*"
        onChange={handleImageUpload}
        ref={inputRef}
      />

      {image && (
        <div className="relative w-[300px] h-[300px]">
          <Cropper
            image={image}
            crop={crop}
            zoom={zoom}
            aspect={1}
            onCropChange={setCrop}
            onZoomChange={setZoom}
            onCropComplete={onCropComplete}
          />
        </div>
      )}

      <button onClick={createGrid} className="px-4 py-2 bg-blue-500 text-white">
        Generate Template
      </button>

      {gridData.length > 0 && (
        <div className="overflow-auto border p-2">
          <h2 className="text-lg font-semibold">Hex Grid Template:</h2>
          <div className="grid" style={{ gridTemplateColumns: `repeat(${canvasSize.width}, 1fr)` }}>
            {gridData.flat().map((color, idx) => (
              <div
                key={idx}
                title={color}
                className="w-4 h-4 text-[6px] text-center border border-gray-200"
                style={{ backgroundColor: color }}
              >
                &nbsp;
              </div>
            ))}
          </div>
        </div>
      )}
    </div>
  );
}
