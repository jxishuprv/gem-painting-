import React, { useState, useRef } from "react";
import Cropper from "react-easy-crop";
// html2canvas is imported but not used in this version.
// It would be used for exporting the final grid as an image.
// import html2canvas from "html2canvas"; 
import quantize from "quantize";

export default function GemPaintingApp() {
  // State for image handling and cropping
  const [image, setImage] = useState(null);
  const [crop, setCrop] = useState({ x: 0, y: 0 });
  const [zoom, setZoom] = useState(1);
  const [croppedAreaPixels, setCroppedAreaPixels] = useState(null);

  // State for grid generation parameters
  const [gridData, setGridData] = useState([]);
  const [gridWidth, setGridWidth] = useState(50); // User-definable grid width
  const [gridHeight, setGridHeight] = useState(50); // User-definable grid height
  const [isGenerating, setIsGenerating] = useState(false); // Loading state

  // Ref for file input (optional, but good for programmatic click)
  const inputRef = useRef(null);

  // Handles image file upload
  const handleImageUpload = (e) => {
    const file = e.target.files[0];
    if (file) {
      const reader = new FileReader();
      reader.onloadend = () => {
        setImage(reader.result);
        setGridData([]); // Clear previous grid when new image is uploaded
      };
      reader.readAsDataURL(file);
    }
  };

  // Callback from Cropper component when crop area changes
  const onCropComplete = (_, croppedPixels) => {
    setCroppedAreaPixels(croppedPixels);
  };

  // Main function to create the gem painting grid
  const createGrid = async () => {
    if (!image || !croppedAreaPixels) {
      console.warn("Please upload an image and crop it first.");
      return;
    }

    setIsGenerating(true); // Set loading state

    const img = new Image();
    img.src = image;

    // Wait for the image to load
    await new Promise((resolve, reject) => {
      img.onload = resolve;
      img.onerror = reject; // Handle potential image loading errors
    }).catch(error => {
      console.error("Error loading image:", error);
      setIsGenerating(false);
      return;
    });

    // Create an off-screen canvas to draw the cropped image
    const canvas = document.createElement("canvas");
    canvas.width = gridWidth; // Use user-defined width
    canvas.height = gridHeight; // Use user-defined height
    const ctx = canvas.getContext("2d");

    // Draw the cropped area of the original image onto the smaller canvas
    ctx.drawImage(
      img,
      croppedAreaPixels.x,
      croppedAreaPixels.y,
      croppedAreaPixels.width,
      croppedAreaPixels.height,
      0,
      0,
      canvas.width,
      canvas.height
    );

    // Get the pixel data from the scaled-down canvas
    const imgData = ctx.getImageData(0, 0, canvas.width, canvas.height);
    const pixels = [];
    // Extract RGB values for each pixel
    for (let i = 0; i < imgData.data.length; i += 4) {
      const r = imgData.data[i];
      const g = imgData.data[i + 1];
      const b = imgData.data[i + 2];
      pixels.push([r, g, b]);
    }

    // Use quantize.js to reduce the number of colors (e.g., to 40 distinct colors)
    // This creates a color map (cmap) for the reduced palette
    const cmap = quantize(pixels, 40);
    // The palette contains the representative colors
    // const palette = cmap.palette(); // Not strictly needed if using cmap.map directly

    const grid = [];
    let pixelIndex = 0; // Keep track of the current pixel in the `pixels` array
    for (let y = 0; y < canvas.height; y++) {
      const row = [];
      for (let x = 0; x < canvas.width; x++) {
        // Get the original pixel's RGB value
        const originalPixel = pixels[pixelIndex++];
        // Map the original pixel to the closest color in the quantized palette
        const mappedColor = cmap.map(originalPixel); // More efficient and idiomatic
        // Convert the mapped RGB color to hex
        const hex = rgbToHex(...mappedColor);
        row.push(hex);
      }
      grid.push(row);
    }
    setGridData(grid);
    setIsGenerating(false); // Clear loading state
  };

  // Helper function to convert RGB to Hexadecimal color string
  const rgbToHex = (r, g, b) =>
    "#" + [r, g, b].map((x) => x.toString(16).padStart(2, "0")).join("");

  return (
    <div className="p-4 space-y-4 font-inter bg-gray-50 min-h-screen rounded-lg shadow-lg">
      <h1 className="text-3xl font-extrabold text-center text-gray-800 mb-6 rounded-md p-2 bg-gradient-to-r from-blue-100 to-purple-100 shadow-md">
        ðŸ’Ž Gem Painting Template Generator ðŸŽ¨
      </h1>

      {/* Image Upload Section */}
      <div className="flex flex-col items-center justify-center space-y-4 bg-white p-6 rounded-xl shadow-md">
        <label htmlFor="image-upload" className="cursor-pointer bg-purple-600 hover:bg-purple-700 text-white font-bold py-3 px-6 rounded-full shadow-lg transition duration-300 ease-in-out transform hover:scale-105">
          Upload Your Image
        </label>
        <input
          id="image-upload"
          type="file"
          accept="image/*"
          onChange={handleImageUpload}
          ref={inputRef}
          className="hidden" // Hide the default file input
        />
        {image && <p className="text-gray-600 text-sm">Image uploaded. Now crop it!</p>}
      </div>

      {/* Image Cropper Section */}
      {image && (
        <div className="relative w-full max-w-md h-80 mx-auto border-2 border-dashed border-gray-300 rounded-xl overflow-hidden shadow-inner">
          <Cropper
            image={image}
            crop={crop}
            zoom={zoom}
            aspect={1} // Force square aspect ratio for the crop area
            onCropChange={setCrop}
            onZoomChange={setZoom}
            onCropComplete={onCropComplete}
            showGrid={true} // Show grid lines on the cropper
            restrictPosition={false} // Allow cropping outside image bounds if needed
          />
        </div>
      )}

      {/* Grid Size and Generate Button */}
      <div className="flex flex-col md:flex-row items-center justify-center space-y-4 md:space-y-0 md:space-x-6 bg-white p-6 rounded-xl shadow-md">
        <div className="flex items-center space-x-3">
          <label htmlFor="grid-width" className="text-gray-700 font-medium">Grid Width:</label>
          <input
            id="grid-width"
            type="number"
            value={gridWidth}
            onChange={(e) => setGridWidth(Math.max(1, parseInt(e.target.value) || 1))} // Ensure min 1
            className="w-20 p-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500 text-center"
            min="1"
            max="200" // Set a reasonable max to prevent performance issues
          />
        </div>
        <div className="flex items-center space-x-3">
          <label htmlFor="grid-height" className="text-gray-700 font-medium">Grid Height:</label>
          <input
            id="grid-height"
            type="number"
            value={gridHeight}
            onChange={(e) => setGridHeight(Math.max(1, parseInt(e.target.value) || 1))} // Ensure min 1
            className="w-20 p-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500 text-center"
            min="1"
            max="200" // Set a reasonable max
          />
        </div>
        <button
          onClick={createGrid}
          className={`px-8 py-3 rounded-full font-bold text-white shadow-lg transition duration-300 ease-in-out transform ${
            !image || isGenerating ? 'bg-gray-400 cursor-not-allowed' : 'bg-blue-600 hover:bg-blue-700 hover:scale-105'
          }`}
          disabled={!image || isGenerating}
        >
          {isGenerating ? "Generating..." : "Generate Template"}
        </button>
      </div>

      {/* Generated Grid Display */}
      {gridData.length > 0 && (
        <div className="bg-white p-6 rounded-xl shadow-md">
          <h2 className="text-2xl font-bold text-gray-800 mb-4 text-center">ðŸŽ¨ Your Gem Template:</h2>
          <p className="text-gray-600 text-sm text-center mb-4">Hover over a square to see its hex color. Adjust grid size above for different detail levels.</p>
          <div className="overflow-auto max-h-[500px] border border-gray-200 rounded-md p-1">
            <div
              className="grid mx-auto" // Center the grid
              style={{
                gridTemplateColumns: `repeat(${gridWidth}, 1fr)`,
                width: `${gridWidth * 16}px`, // Adjust cell size for better visibility if needed, e.g., 16px per cell
                maxWidth: '100%'
              }}
            >
              {gridData.flat().map((color, idx) => (
                <div
                  key={idx}
                  title={color} // Shows hex color on hover
                  className="w-4 h-4 text-[6px] text-center border border-gray-100 flex items-center justify-center rounded-sm"
                  style={{ backgroundColor: color }}
                >
                  {/* You could add a symbol/number here for true gem painting, e.g., String.fromCharCode(65 + (idx % 26)) */}
                  &nbsp; 
                </div>
              ))}
            </div>
          </div>
          {/* Example of where html2canvas could be used for export */}
          {/* <button 
            onClick={() => {
              // Logic to capture the grid div and download as image
              const gridElement = document.querySelector('.grid'); // Select the grid div
              if (gridElement) {
                html2canvas(gridElement).then(canvas => {
                  const link = document.createElement('a');
                  link.download = 'gem-template.png';
                  link.href = canvas.toDataURL('image/png');
                  link.click();
                });
              }
            }}
            className="mt-6 px-6 py-2 bg-green-600 hover:bg-green-700 text-white font-bold rounded-full shadow-lg transition duration-300 ease-in-out transform hover:scale-105"
          >
            Download Template (PNG)
          </button> */}
        </div>
      )}
    </div>
  );
}
